// frontend/src/components/GenerationResultDisplay/GenerationResultDisplay.tsx
import React from 'react';
import { observer } from 'mobx-react-lite';
import generationStore from '../../stores/GenerationStore';
import './GenerationResultDisplay.scss';

const Spinner: React.FC = () => <div className="spinner-main"></div>;

const GenerationResultDisplay: React.FC = observer(() => {
  const { isLoading, generatedImageUrl, error } = generationStore;

  const handleDownload = () => {
    if (generatedImageUrl) {
      const link = document.createElement('a');
      link.href = generatedImageUrl;
      const filename = generatedImageUrl.substring(generatedImageUrl.lastIndexOf('/') + 1) || 'generated_image.png';
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  if (isLoading) {
    return (
      <div className="generation-result-display loading-active">
        <Spinner />
        <p>CoverAI is creating magic... âœ¨</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="generation-result-display error-active">
        <p className="error-message">Oops! Something went wrong: {error}</p>
        {/* The "Generate Another Image" button will be handled by ChatPage */}
      </div>
    );
  }

  if (generatedImageUrl) {
    return (
      <div className="generation-result-display success-active">
        <div className="generated-image-wrapper animated-appear">
          <img src={generatedImageUrl} alt="Generated by CoverAI" className="generated-image" />
          <div className="image-actions">
            <button onClick={handleDownload} className="action-button download-button">
              Download Image
            </button>
            {/* You can add more action buttons here if needed */}
          </div>
        </div>
      </div>
    );
  }

  // This state might be briefly visible if onUploadSubmit is called but API call hasn't started/finished
  // Or if there's an unhandled state.
  return (
    <div className="generation-result-display">
       {/* Fallback or initial state before loading/error/success */}
       {/* <p>Preparing for generation...</p> */}
    </div>
  );
});

export default GenerationResultDisplay;
